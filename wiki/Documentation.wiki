#summary API Documentation

<wiki:toc max_depth="2" />

= Overview =
The Cluster Truck API allows you to use all of the great Cluster Truck data for you application. Our API (attempts to) follow the [http://en.wikipedia.org/wiki/Representational_State_Transfer REST] protocol.

<blockquote>

== URI Structure ==
All of the API's URIs are broken into three parts: the method, the path and the query parameters. Below is an example URI, broken into section

{{{
http://api.clustertruck.org/v1/truck/kogi/info?key1=val1&key2=val2
                             |method|   path  |      query       |
}}}

   * *Method* The Method you are requesting. Always required.
   * *Path* Path information is required information for each method. Note that some methods will use default path values if no path is provided
   * *Query* Query Parameters are optional information that in some way modify the method

== Authentication ==
To make requests to the Cluster Truck API, you must provide authentication information for your application. If you're make requests on behalf of a User, you must also provide that user's authentication information.

=== Application Authentication ===
To authenticate your application, you must provide two pieces of information:

   # *API Key*
      * HTTP Header: `x-clustertruck-key`
      * Query Parameter: `key={key}`
   # *Request Signature*
      * HTTP Header: `x-clustertruck-sig`
      * Query Parameter: `sig={sig}`     

*Generating a Signature*
To generate a request signature, provide an MD5 Hash of the following information:
{{{
{api_secret}{method}{http_method}{request_url}
}}}

   * *api_secret* Your applications API Secret
   * *method* API Method you would like to make _ex: truck_
   * *http_method* HTTP Method of the request _ex: GET_
   * *request_url* Full URL of the request (without a `sig` parameter)

*PHP Example*
{{{
 $secret = "xxx";
 $method = "truck";
 $http = "GET";
 $url = "http://api.clustertruck.org/v1/truck/fressers";
 $sig = md5("{$secret}{$method}{$http}{$url}");
}}}

=== User Authentication ===
Since we don't have any user methods, we don't need to worry about authenticating them.

== Response Formats==
Our API supports three response formats: JSON, Serialize PHP & XML (default). You can specify the desired response format in one of two ways

   * HTTP Header: `Accept: {text/javascript|application/php|application/xml}`
   * Query Parameter: `format={json|php|xml}`

</blockquote>

= Methods =

== Truck Information (truck) ==

<blockquote>

=== GET ===

   * URL: `/v1/truck/{slug|id}/{view}`
   * HTTP Method: GET
   * User Authentication: No

==== Parameters ==== 
   * *slug* Truck Slug. _ex: kogi_
   * *id* Id of Truck _ex: 1_
   * *view* Comma separated list of truck information to return _ex: info,menu_
      * *info* - general truck information
      * *menu* - truck menu
      * *location* - current & future truck locations

==== Examples ====
URL: http://api.clustertruck.org/v1/truck/fressers <BR>
Return:
{{{
<?xml version="1.0" encoding="utf-8"?>
<result status="1">
  <truck id="4" slug="fressers">
    <info>
      <name>Fressers Pastrami</name>
      <description><![CDATA[Food truck offering fresh hot pastrami and other deli favorites throughout the Los Angeles area.]]></description>
      <website>http://www.fressers.com/</website>
      <images>
        <feature>
          <url>http://cdn.bitsybox.com/98b3b76531ac8d70ca7f5414716ac691.jpg</url>
          <attribution>http://fressers.wordpress.com/</attribution>
        </feature>
        <twitter>
          <url>http://a1.twimg.com/profile_images/520787342/fressertweet2_normal.jpg</url>
        </twitter>
      </images>
    </info>
    <menu count="4">
      <item id="4b4d839e121c8">
        <name>Turkey Sandwich</name>
        <description><![CDATA[home roasted turkey, swiss cheese, leafed lettuce, fresh tomatoe, cranberry sauce, mayonaise]]></description>
        <image>
          <url>http://cdn.bitsybox.com/084642810f89478da18d09475b78a821.jpg</url>
        </image>
        <price>0.00</price>
      </item>
      <item id="4b4d83b49088f">
        <name>Hot Pastrami Sandwich</name>
        <description><![CDATA[hand sliced hot pastrami, Beaver Brand mustard, rye bread ]]></description>
        <image>
          <url>http://cdn.bitsybox.com/611a539fbb2042abff6f5b2b6b4ff61f.jpg</url>
        </image>
        <price>0.00</price>
      </item>
    </menu>
    <locations count="0"/>
  </truck>
</result>
}}}

URL: http://api.clustertruck.org/v1/truck/fressers/info <BR>
Return: 
{{{
<?xml version="1.0" encoding="utf-8"?>
<result status="1">
  <truck id="4" slug="fressers">
    <info>
      <name>Fressers Pastrami</name>
      <description><![CDATA[Food truck offering fresh hot pastrami and other deli favorites throughout the Los Angeles area.]]></description>
      <website>http://www.fressers.com/</website>
      <images>
        <feature>
          <url>http://cdn.bitsybox.com/98b3b76531ac8d70ca7f5414716ac691.jpg</url>
          <attribution>http://fressers.wordpress.com/</attribution>
        </feature>
        <twitter>
          <url>http://a1.twimg.com/profile_images/520787342/fressertweet2_normal.jpg</url>
        </twitter>
      </images>
    </info>
  </truck>
</result>

}}}

== List of Trucks (trucks) ==

=== GET ===

   * URL: `/v1/trucks?name={name}&page={page}&per={per}`
   * HTTP Method: GET
   * User Authentication: No

==== Parameters ====   
   * *name* Search trucks based on provided "name" Will perform an exact, case-insensitive, match on truck titles. Use '`*`' for wild card searches. _ex: `k*`_ _required: no_
   * *page* Page to start on _default: 1_ | _required: no_
   * *per* Results per page _default: 20_ | _max: 20_ | _required: no_

==== Examples ====
URL: http://api.clustertruck.org/v1/trucks/ <BR>
Response:
{{{
<?xml version="1.0" encoding="utf-8"?>
<result status="1">
  <trucks total="62" pages="4">
    <truck id="1" slug="kogi">
      <name>Kogi BBQ</name>
      <description><![CDATA[Known for it&#039;s fusion of Korean and Mexican food, Kogi is the granddaddy of them all, often credited for starting the Twitter food truck phenomenon.]]></description>
      <location id="5">
        <name>Sunset Blvd &amp;amp; Micheltorena, Los Angeles, CA</name>
        <lat>34.087570000000</lat>
        <long>-118.275869000000</long>
        <start>1263672000</start>
        <stop>1263682800</stop>
      </location>
    </truck>
    <truck id="2" slug="barbiesq">
      <name>Barbie&amp;#039;s Q</name>
      <description><![CDATA[A rollin&#039; BBQ joint, complete with blues music, pork, beef, and cheesy grits.]]></description>
      <location id="9">
        <name>2700 Pennsylvania, Santa Monica, CA</name>
        <lat>34.030289000000</lat>
        <long>-118.469145000000</long>
        <start>1263927600</start>
        <stop>1263942000</stop>
      </location>
    </truck>
    <truck id="3" slug="grilledcheese">
      <name>Grilled Cheese Truck</name>
      <description><![CDATA[Chef driven grilled cheese... &#039;cause that&#039;s how we roll.]]></description>
      <location id="2">
        <name>900 Exposition, Los Angeles, CA</name>
        <lat>34.018067000000</lat>
        <long>-118.289137000000</long>
        <start>1263672000</start>
        <stop>1263682800</stop>
      </location>
    </truck>
  </trucks>
</result>
}}}

URL: http://api.clustertruck.org/v1/trucks/?name=k*&page=1&per=5
Response:
{{{
<?xml version="1.0" encoding="utf-8"?>
<result status="1">
  <trucks total="4" pages="1">
    <truck id="1" slug="kogi">
      <name>Kogi BBQ</name>
      <description><![CDATA[Known for it&#039;s fusion of Korean and Mexican food, Kogi is the granddaddy of them all, often credited for starting the Twitter food truck phenomenon.]]></description>
      <location id="5">
        <name>Sunset Blvd &amp;amp; Micheltorena, Los Angeles, CA</name>
        <lat>34.087570000000</lat>
        <long>-118.275869000000</long>
        <start>1263672000</start>
        <stop>1263682800</stop>
      </location>
    </truck>
    <truck id="9" slug="komodo">
      <name>Komodo Food</name>
      <description><![CDATA[Not your average taco truck... Brace yourself for a unique flavor adventure.]]></description>
      <location id="53">
        <name>5700 Wilshire, Los Angeles, CA</name>
        <lat>34.062298000000</lat>
        <long>-118.352700000000</long>
        <start>1264014000</start>
        <stop>1264024800</stop>
      </location>
    </truck>
    <truck id="45" slug="king-kone">
      <name>King Kone</name>
      <description><![CDATA[King Kone is a mobile ice parlor providing treats out of a sweet butter yellow truck.]]></description>
      <location id="11">
        <name>6201 Winnetka Ave Woodland Hills, CA 91371</name>
        <lat>34.185373000000</lat>
        <long>-118.571004000000</long>
        <start>1263841200</start>
        <stop>1263859200</stop>
      </location>
    </truck>
    <truck id="62" slug="kabob-n-roll">
      <name>Kabob N&amp;#039; Roll</name>
      <description><![CDATA[Fresh, Healthy, Authentic, Delicious, Mediterranean Cuisine]]></description>
      <location></location>
    </truck>
  </trucks>
</result>
}}}

== Location (location) ==

=== GET ===

   * URL: `/v1/location/{location_id|lat_long}?start={start}&stop={stop}`
   * HTTP Method: GET
   * User Authentication: No

==== Parameters ====  
   * *location_id* Unique Id for a given location. `md5($lat$long)`
   * *lat_long* Latitude and Longitude of location, separated by a comma. _ex: 33.833970000000,-117.915620000000_
   * *start* Show only trucks that will be at the location after this time _format: unix timestamp_ | _required: no_
   * *stop* Show only trucks that will be at the location until this time _format: unix timestamp_ | _required: no_

==== Example ====
URL: http://api.clustertruck.org/v1/location/33.833970000000,-117.915620000000
Response: 
{{{
<?xml version="1.0" encoding="utf-8"?>
<result status="1">
  <location id="157e366fb2bb7c9cbdda5a71a1846430">
    <address>203 Center Street Promenade, Anaheim, CA 92805</address>
    <lat>33.833970000000</lat>
    <long>-117.915620000000</long>
    <trucks count="1">
      <truck id="42" slug="crepes-bonaparte">
        <name>Crepes Bonaparte</name>
        <description><![CDATA[French Crepe Catering + Crepe Truck]]></description>
        <start timestamp="1267128000">2010-02-25T12:00:00-08:00</start>
        <end timestamp="1267153200">2010-02-25T19:00:00-08:00</end>
      </truck>
    </trucks>
  </location>
</result>
}}}

== List of Locations (locations) ==

=== GET ===

   * URL: `/v1/locations?lat={lat}&long={long}&distance={distance}&start={start}&stop={stop}&page={page}&per={per}`
   * HTTP Method: GET
   * User Authentication: No

==== Parameters ====  
   * *lat* Center latitude of location | _required: no_
   * *long* Center Longitude of the location | _required: no_
   * *distance* Distance from the center lat/long to search. _lat & long are required_ | _required: no_
   * *start* Show only trucks that will be at the location after this time _format: unix timestamp_ | _required: no_
   * *stop* Show only trucks that will be at the location until this time _format: unix timestamp_ | _required: no_
   * *page* Page to start on _default: 1_ | _required: no_
   * *per* Results per page _default: 20_ | _max: 20_ | _required: no_

==== Examples ====
URL: http://api.clustertruck.org/v1/locations <BR>
Response: 
{{{
<?xml version="1.0" encoding="utf-8"?>
<result status="1">
  <locations total="2" pages="1">
    <location>
      <address>203 Center Street Promenade, Anaheim, CA 92805</address>
      <lat>33.833970000000</lat>
      <long>-117.915620000000</long>
      <trucks count="1">
        <truck id="42" slug="crepes-bonaparte">
          <name>Crepes Bonaparte</name>
          <description><![CDATA[French Crepe Catering + Crepe Truck]]></description>
          <start timestamp="1267128000">2010-02-25T12:00:00-08:00</start>
          <end timestamp="1267153200">2010-02-25T19:00:00-08:00</end>
        </truck>
      </trucks>
    </location>
    <location>
      <address>6041 Variel Ave, Woodland Hills, CA</address>
      <lat>34.180204000000</lat>
      <long>-118.592951000000</long>
      <trucks count="1">
        <truck id="54" slug="nom-nom-truck">
          <name>Nom Nom</name>
          <description><![CDATA[Banh Mi Food Truck ]]></description>
          <start timestamp="1265050800">2010-02-01T11:00:00-08:00</start>
          <end timestamp="1265061600">2010-02-01T14:00:00-08:00</end>
        </truck>
      </trucks>
    </location>
  </locations>
</result>
}}}

URL: http://api.clustertruck.org/v1/locations?lat=33.833970000000&long=-117.915620000000
Response: 
{{{
<?xml version="1.0" encoding="utf-8"?>
<result status="1">
  <locations total="1" pages="1">
    <location>
      <address>203 Center Street Promenade, Anaheim, CA 92805</address>
      <lat>33.833970000000</lat>
      <long>-117.915620000000</long>
      <trucks count="1">
        <truck id="42" slug="crepes-bonaparte">
          <name>Crepes Bonaparte</name>
          <description><![CDATA[French Crepe Catering + Crepe Truck]]></description>
          <start timestamp="1267128000">2010-02-25T12:00:00-08:00</start>
          <end timestamp="1267153200">2010-02-25T19:00:00-08:00</end>
        </truck>
      </trucks>
    </location>
  </locations>
</result>
}}}

== Neighborhood (neighborhood) ==

=== GET ===

   * URL: `/v1/neighborhood/{id|slug}`
   * HTTP Method: GET
   * User Authentication: No

==== Parameters ==== 
   * *id* Neighborhood Id 
   * *slug* Neighborhood Slug
   * *start* Show only trucks that will be at the location after this time _format: unix timestamp_ | _required: no_
   * *stop* Show only trucks that will be at the location until this time _format: unix timestamp_ | _required: no_

==== Example ====
URL: http://api.clustertruck.org/v1/neighborhood/westwood
Response:
{{{
<?xml version="1.0" encoding="utf-8"?>
<result status="1">
  <neighborhood id="5" slug="westwood">
    <name>Westwood</name>
    <center>
      <lat>34.056068000000</lat>
      <long>-118.432403000000</long>
    </center>
    <locations count="1">
      <location id="b20405a4cafeba1aeb716c425201cbbb">
        <address>UCLA, Los Angeles, CA</address>
        <lat>34.064430000000</lat>
        <long>-118.444618000000</long>
        <trucks count="1">
          <truck id="54" slug="nom-nom-truck">
            <name>Nom Nom</name>
            <description><![CDATA[Banh Mi Food Truck ]]></description>
            <start timestamp="1264532400">2010-01-26T11:00:00-08:00</start>
            <end timestamp="1264546800">2010-01-26T15:00:00-08:00</end>
          </truck>
        </trucks>
      </location>
    </locations>
  </neighborhood>
</result>
}}}

== List of Neighborhoods (neighborhoods) ==

=== GET ===

   * URL: `/v1/locations?lat={lat}&long={long}&distance={distance}&start={start}&stop={stop}&page={page}&per={per}`
   * HTTP Method: GET
   * User Authentication: No

==== Parameters ==== 

=== GET ===

= Error Codes =